<h3>Songs</h3>
@page "/songs"
@inject SongService songService

<h1>My Song List</h1>
<p>This component demonstrates managing a Song list.</p>
@if (songs == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<button @onclick="@Add" class="btn btn-success">Add</button>
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Title</th>
				<th>Artist</th>
				<th>Date</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in songs)
			{

				<tr @onclick="@(() => Show(item.Id))">
				
					<td>@item.Id</td>
					<td>@item.Title</td>
					<td>@item.Artist</td>
					<td>@item.Year</td>
				</tr>
			}
		</tbody>
	</table>
}

@if (songs != null && mode == MODE.Add)
{
	<input placeholder="Title" @bind="@title" />
	<br />
	<input placeholder="Artist" @bind="@artist" />
	<br />
	<input placeholder="Year" @bind="@year" />
	<br />
	<button @onclick="@Insert" class="btn btn-warning">Insert</button>
}

@if (songs != null && mode == MODE.EditDelete) // Update & Delete form
{
	<input type="hidden" @bind="@id" />
	<br />
	<input placeholder="First Name" @bind="@title" />
	<br />
	<input placeholder="Last Name" @bind="@artist" />
	<br />
	<input placeholder="School" @bind="@year" />
	<br />
	<button @onclick="@Update" class="btn btn-primary">Update</button>
	<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
	<button @onclick="@Delete" class="btn btn-danger">Delete</button>
}

@code {

	Song song;

	string id;
	string title;
	string artist;
	string year;
	private enum MODE { None, Add, EditDelete };
	MODE mode = MODE.None;


	List<Song> songs;
	protected override async Task OnInitializedAsync()
	{
		await Load();
	}
	protected async Task Load()
	{
		songs = await songService.GetSongsAsync();
	}

	protected void Add()
	{
		ClearFields();
		mode = MODE.Add;
	}

	protected void ClearFields()
	{
		id = string.Empty;
		title = string.Empty;
		artist = string.Empty;
		year = string.Empty;
	}

	protected async Task Insert()
	{
		Song s = new Song()
			{
				Id = Guid.NewGuid().ToString(),
				Title = title,
				Artist = artist,
				Year = year
			};
		await songService.InsertSongAsync(s);
		ClearFields();
		await Load();
		mode = MODE.None;
	}

	protected async Task Show(string id)
	{
		song = await songService.GetSongByIdAsync(id);
		id = song.Id;
		title = song.Title;
		artist = song.Artist;
		year = song.Year;
		mode = MODE.EditDelete;
	}
	protected async Task Update()
	{
		Song s = new Song()
			{
				Id = id,
				Title = title,
				Artist = artist,
				Year = year
			};
		await songService.UpdateSongAsync(song.Id, s);
		ClearFields();
		await Load();
		mode = MODE.None;
	}
	protected async Task Delete()
	{
		await songService.DeleteSongAsync(song.Id);
		ClearFields();
		await Load();
		mode = MODE.None;
	}

}
